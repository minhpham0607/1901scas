package org.example.lms1.biz.contents.controller.rest;

import org.example.lms1.biz.contents.model.dto.ContentsDTO;
import org.example.lms1.biz.contents.service.ContentsService;
import org.example.lms1.biz.course.service.CourseService;

import org.example.lms1.biz.enrollments.service.EnrollmentsService;
import org.example.lms1.biz.modules.service.ModulesService;
import org.example.lms1.security.CustomUserDetails;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/contents")
public class ContentsRestController {
    @Autowired
    private EnrollmentsService enrollmentsService;

    @Autowired
    private ContentsService contentsService;

    @Autowired
    private CourseService courseService; // üëà ƒë·ªÉ ki·ªÉm tra instructor

    @Autowired
    private ModulesService moduleService; // üëà ƒë·ªÉ tra courseId t·ª´ moduleId

    @PostMapping
    @PreAuthorize("hasAnyRole('admin', 'instructor')")
    public ResponseEntity<String> createContent(@RequestBody ContentsDTO request,
                                                @AuthenticationPrincipal CustomUserDetails userDetails) {
        int userId = userDetails.getUserId();

        // N·∫øu l√† instructor ‚Üí ki·ªÉm tra quy·ªÅn v·ªõi module
        if (userDetails.hasRole("instructor")) {
            int courseId = moduleService.getCourseIdByModuleId(request.getModuleId());
            boolean isOwner = courseService.isInstructorOfCourse(userId, courseId);
            if (!isOwner) {
                return ResponseEntity.status(403).body("B·∫°n kh√¥ng c√≥ quy·ªÅn t·∫°o n·ªôi dung cho module n√†y");
            }
        }
        contentsService.createContent(request);
        return ResponseEntity.ok("Content created successfully");
    }
    @GetMapping("/by-course/{courseId}")
    @PreAuthorize("hasAnyRole('admin', 'instructor', 'student')")
    public ResponseEntity<?> getContentsByCourse(
            @PathVariable int courseId,
            @AuthenticationPrincipal CustomUserDetails userDetails
    ) {
        int userId = userDetails.getUserId();

        // N·∫øu l√† instructor ‚Üí ph·∫£i d·∫°y course ƒë√≥
        if (userDetails.hasRole("instructor")) {
            if (!courseService.isInstructorOfCourse(userId, courseId)) {
                return ResponseEntity.status(403).body("Instructor kh√¥ng c√≥ quy·ªÅn v·ªõi kh√≥a h·ªçc n√†y");
            }
        }

        // N·∫øu l√† student ‚Üí ph·∫£i ƒë√£ ƒëƒÉng k√Ω kh√≥a h·ªçc
        if (userDetails.hasRole("student")) {
            if (!enrollmentsService.isStudentEnrolled(userId, courseId)) {
                return ResponseEntity.status(403).body("B·∫°n ch∆∞a ƒëƒÉng k√Ω kh√≥a h·ªçc n√†y");
            }
        }

        List<ContentsDTO> contents = contentsService.getContentsByCourseId(courseId);
        return ResponseEntity.ok(contents);
    }
    @PutMapping("/{contentId}")
    @PreAuthorize("hasAnyRole('admin', 'instructor')")
    public ResponseEntity<?> updateContent(
            @PathVariable int contentId,
            @RequestBody ContentsDTO request,
            @AuthenticationPrincipal CustomUserDetails userDetails) {

        // ‚úÖ Ki·ªÉm tra quy·ªÅn instructor c√≥ ƒë∆∞·ª£c s·ª≠a kh√¥ng (n·∫øu c·∫ßn)
        if (userDetails.hasRole("instructor")) {
            int courseId = moduleService.getCourseIdByModuleId(request.getModuleId());
            if (!courseService.isInstructorOfCourse(userDetails.getUserId(), courseId)) {
                return ResponseEntity.status(403).body("B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠a n·ªôi dung n√†y");
            }
        }

        request.setContentId(contentId); // g√°n ID t·ª´ path
        contentsService.updateContent(request);
        return ResponseEntity.ok("C·∫≠p nh·∫≠t n·ªôi dung th√†nh c√¥ng");
    }
    @DeleteMapping("/{contentId}")
    @PreAuthorize("hasAnyRole('admin', 'instructor')")
    public ResponseEntity<?> deleteContent(
            @PathVariable int contentId,
            @AuthenticationPrincipal CustomUserDetails userDetails) {

        // (Optional) Ki·ªÉm tra quy·ªÅn instructor c√≥ ƒë∆∞·ª£c x√≥a kh√¥ng
        if (userDetails.hasRole("instructor")) {
            // L·∫•y moduleId v√† courseId ƒë·ªÉ ki·ªÉm tra quy·ªÅn
            Integer moduleId = contentsService.getModuleIdByContentId(contentId);
            if (moduleId == null) {
                return ResponseEntity.badRequest().body("N·ªôi dung kh√¥ng t·ªìn t·∫°i");
            }
            int courseId = moduleService.getCourseIdByModuleId(moduleId);
            if (!courseService.isInstructorOfCourse(userDetails.getUserId(), courseId)) {
                return ResponseEntity.status(403).body("B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a n·ªôi dung n√†y");
            }
        }

        contentsService.deleteContent(contentId);
        return ResponseEntity.ok("X√≥a n·ªôi dung th√†nh c√¥ng");
    }


}
